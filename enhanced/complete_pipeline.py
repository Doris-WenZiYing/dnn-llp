#!/usr/bin/env python3
"""
DNN+ILP ÂÖâÁ∂≤Ë∑ØRWAÂÆåÊï¥Âü∑Ë°åÊµÅÁ®ã
‰ΩúËÄÖ: Âü∫ÊñºÂéüÂßã‰ª£Á¢ºÂÑ™Âåñ
ÁõÆÊ®ô: ËÆìDNNÂú®ÊâÄÊúâÊãìÊí≤‰∏ãÈÉΩËÉΩÈÅîÂà∞80%‰ª•‰∏äÊ∫ñÁ¢∫Áéá
ÊîØÊè¥: python3 Âíå python ÂëΩ‰ª§
"""

import os
import sys
import subprocess
import time
from pathlib import Path

class RWAPipeline:
    """RWAÂÆåÊï¥ÊµÅÁ®ãÁÆ°ÁêÜÂô®"""
    
    def __init__(self, python_cmd='python3'):
        self.python_cmd = python_cmd  # ÊîØÊè¥ python3 Êàñ python
        self.steps = [
            ("1. ÁîüÊàêÂ§öÊãìÊí≤Êï∏Êìö", "enhanced_datamake.py"),
            ("2. ILPÊ±ÇËß£Ë®ìÁ∑¥Êï∏Êìö", "enhanced_ilp_solver.py"),
            ("3. Ë®ìÁ∑¥ÊãìÊí≤ÊÑüÁü•DNN", "enhanced_dnn_training.py"),
            ("4. ÊÄßËÉΩË©ï‰º∞ËàáÊ∏¨Ë©¶", "enhanced_predictor.py")
        ]
        
    def check_python_command(self):
        """Ê™¢Êü•PythonÂëΩ‰ª§ÊòØÂê¶ÂèØÁî®"""
        try:
            result = subprocess.run([self.python_cmd, '--version'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ {self.python_cmd} ÂèØÁî®: {result.stdout.strip()}")
                return True
            else:
                print(f"‚ùå {self.python_cmd} ‰∏çÂèØÁî®")
                return False
        except FileNotFoundError:
            print(f"‚ùå {self.python_cmd} ÂëΩ‰ª§Êú™ÊâæÂà∞")
            return False
        
    def check_dependencies(self):
        """Ê™¢Êü•‰æùË≥¥Â•ó‰ª∂"""
        required_packages = {
            'tensorflow': 'tensorflow',
            'pandas': 'pandas', 
            'numpy': 'numpy',
            'scikit-learn': 'sklearn',  # Â•ó‰ª∂ÂêçÂíåÂ∞éÂÖ•Âêç‰∏çÂêå
            'matplotlib': 'matplotlib',
            'networkx': 'networkx',
            'pulp': 'pulp',
            'seaborn': 'seaborn',
            'joblib': 'joblib'
        }
        
        print("üîç Ê™¢Êü•‰æùË≥¥Â•ó‰ª∂...")
        missing_packages = []
        
        for package_name, import_name in required_packages.items():
            try:
                __import__(import_name)
                print(f"  ‚úÖ {package_name}")
            except ImportError:
                print(f"  ‚ùå {package_name} (Êú™ÂÆâË£ù)")
                missing_packages.append(package_name)
        
        if missing_packages:
            print(f"\nË´ãÂÆâË£ùÁº∫Â§±ÁöÑÂ•ó‰ª∂:")
            print(f"{self.python_cmd} -m pip install {' '.join(missing_packages)}")
            return False
        
        print("‚úÖ ÊâÄÊúâ‰æùË≥¥Â•ó‰ª∂Â∑≤ÂÆâË£ù")
        return True
    
    def run_step(self, step_name, script_name):
        """Âü∑Ë°åÂñÆ‰∏ÄÊ≠•È©ü"""
        print(f"\n{'='*60}")
        print(f"üöÄ Âü∑Ë°å: {step_name}")
        print(f"{'='*60}")
        
        if not os.path.exists(script_name):
            print(f"‚ùå ËÖ≥Êú¨‰∏çÂ≠òÂú®: {script_name}")
            print("Ë´ãÁ¢∫Ë™çÊâÄÊúâ‰ª£Á¢ºÊñá‰ª∂ÈÉΩÂ∑≤Ê≠£Á¢∫Âª∫Á´ã")
            return False
        
        start_time = time.time()
        
        try:
            # ‰ΩøÁî®ÊåáÂÆöÁöÑPythonÂëΩ‰ª§Âü∑Ë°åËÖ≥Êú¨
            print(f"Âü∑Ë°åÂëΩ‰ª§: {self.python_cmd} {script_name}")
            result = subprocess.run([self.python_cmd, script_name], 
                                  capture_output=True, text=True)
            
            elapsed_time = time.time() - start_time
            
            if result.returncode == 0:
                print(f"‚úÖ {step_name} ÂÆåÊàê (ËÄóÊôÇ: {elapsed_time:.1f}Áßí)")
                if result.stdout:
                    print("Ëº∏Âá∫:")
                    print(result.stdout)
                return True
            else:
                print(f"‚ùå {step_name} Â§±Êïó")
                if result.stderr:
                    print("ÈåØË™§Ë®äÊÅØ:")
                    print(result.stderr)
                return False
                
        except Exception as e:
            print(f"‚ùå Âü∑Ë°åÈåØË™§: {e}")
            print(f"ÊèêÁ§∫: Ë´ãÁ¢∫Ë™ç {self.python_cmd} ÂëΩ‰ª§ÂèØÁî®")
            return False
    
    def create_script_files(self):
        """Âª∫Á´ãÊâÄÊúâÂøÖË¶ÅÁöÑËÖ≥Êú¨Êñá‰ª∂"""
        print("üìù Ë´ãÁ¢∫Ë™ç‰ª•‰∏ãËÖ≥Êú¨Êñá‰ª∂Â∑≤Âª∫Á´ã:")
        
        scripts = [
            "enhanced_datamake.py",
            "enhanced_ilp_solver.py", 
            "enhanced_dnn_training.py",
            "enhanced_predictor.py"
        ]
        
        all_exist = True
        for script in scripts:
            if os.path.exists(script):
                print(f"  ‚úÖ {script}")
            else:
                print(f"  ‚ùå {script} (Áº∫Â§±)")
                all_exist = False
        
        return all_exist
    
    def check_results(self):
        """Ê™¢Êü•Âü∑Ë°åÁµêÊûú"""
        print("\nüîç Ê™¢Êü•Âü∑Ë°åÁµêÊûú...")
        
        expected_files = [
            "tms_8nodes_enhanced/",
            "topology_info.pkl",
            "enhanced_dataset_all_topologies.csv",
            "enhanced_label_mappings.pkl",
            "training_results/",
            "prediction_results/"
        ]
        
        results = {}
        for item in expected_files:
            if item.endswith("/"):
                # ÁõÆÈåÑ
                exists = os.path.isdir(item)
                if exists:
                    try:
                        file_count = len([f for f in os.listdir(item) 
                                        if os.path.isfile(os.path.join(item, f))])
                        print(f"  ‚úÖ {item} (ÂåÖÂê´ {file_count} ÂÄãÊñá‰ª∂)")
                    except:
                        print(f"  ‚úÖ {item} (ÁõÆÈåÑÂ≠òÂú®)")
                else:
                    print(f"  ‚ùå {item} (ÁõÆÈåÑ‰∏çÂ≠òÂú®)")
            else:
                # Êñá‰ª∂
                exists = os.path.exists(item)
                if exists:
                    try:
                        size_mb = os.path.getsize(item) / 1024 / 1024
                        print(f"  ‚úÖ {item} ({size_mb:.1f} MB)")
                    except:
                        print(f"  ‚úÖ {item} (Êñá‰ª∂Â≠òÂú®)")
                else:
                    print(f"  ‚ùå {item} (Êñá‰ª∂‰∏çÂ≠òÂú®)")
            
            results[item] = exists
        
        return results
    
    def show_final_report(self):
        """È°ØÁ§∫ÊúÄÁµÇÂ†±Âëä"""
        print("\n" + "="*80)
        print("üéØ DNN+ILP ÂÖâÁ∂≤Ë∑ØRWA Â∞àÊ°àÂü∑Ë°åÂÆåÊàêÂ†±Âëä")
        print("="*80)
        
        # ËÆÄÂèñË®ìÁ∑¥ÁµêÊûú
        results_file = "training_results/results_summary.pkl"
        if os.path.exists(results_file):
            try:
                import pickle
                with open(results_file, 'rb') as f:
                    results = pickle.load(f)
                
                print(f"Êï¥È´îÊ∏¨Ë©¶Ê∫ñÁ¢∫Áéá: {results['overall_test_accuracy']:.4f}")
                print("\nÂêÑÊãìÊí≤Ê∫ñÁ¢∫Áéá:")
                
                all_above_80 = True
                for topo, result in results['topology_results'].items():
                    accuracy = result['accuracy']
                    status = "‚úÖ" if accuracy >= 0.8 else "‚ùå"
                    print(f"  {status} {topo.upper()}: {accuracy:.4f}")
                    if accuracy < 0.8:
                        all_above_80 = False
                
                if all_above_80:
                    print("\nüéâ ÊÅ≠ÂñúÔºÅÊâÄÊúâÊãìÊí≤ÈÉΩÈÅîÂà∞80%‰ª•‰∏äÊ∫ñÁ¢∫ÁéáÁõÆÊ®ôÔºÅ")
                else:
                    print("\n‚ö†Ô∏è ÈÉ®ÂàÜÊãìÊí≤Êú™ÈÅîÂà∞80%ÁõÆÊ®ôÔºåÂª∫Ë≠∞ÈÄ≤‰∏ÄÊ≠•ÂÑ™Âåñ")
                
            except Exception as e:
                print(f"ÁÑ°Ê≥ïËÆÄÂèñË®ìÁ∑¥ÁµêÊûú: {e}")
        
        # È°ØÁ§∫‰ΩøÁî®ÊåáÂçó
        print("\nüìñ ‰ΩøÁî®ÊåáÂçó:")
        print("1. Êü•ÁúãË®ìÁ∑¥Êõ≤Á∑ö: training_results/training_results.png")
        print("2. Êü•ÁúãÈ†êÊ∏¨ÁµêÊûú: prediction_results/evaluation_results.png")
        print(f"3. ‰ΩøÁî®Ê®°ÂûãÈ†êÊ∏¨: {self.python_cmd} enhanced_predictor.py")
        print("4. Êü•ÁúãË©≥Á¥∞Êó•Ë™å: Ê™¢Êü•ÂêÑÊ≠•È©üÁöÑËº∏Âá∫")
        
        print("\nüìÅ ÈáçË¶ÅÊñá‰ª∂:")
        print("- Ë®ìÁ∑¥Â•ΩÁöÑÊ®°Âûã: training_results/topology_aware_dnn_model.keras")
        print("- ÁâπÂæµÊ®ôÊ∫ñÂåñÂô®: enhanced_scaler.pkl")
        print("- Ê®ôÁ±§Êò†Â∞Ñ: enhanced_label_mappings.pkl")
        print("- ÊãìÊí≤Ë≥áË®ä: topology_info.pkl")
    
    def run_complete_pipeline(self):
        """Âü∑Ë°åÂÆåÊï¥ÊµÅÁ®ã"""
        print("üåü DNN+ILP ÂÖâÁ∂≤Ë∑ØRWA ÊãìÊí≤ÊÑüÁü•Ëß£Ê±∫ÊñπÊ°à")
        print("ÁõÆÊ®ô: ËÆìDNNÂú®ÊâÄÊúâÊãìÊí≤‰∏ãÈÉΩËÉΩÈÅîÂà∞80%‰ª•‰∏äÊ∫ñÁ¢∫Áéá")
        print(f"‰ΩøÁî®PythonÂëΩ‰ª§: {self.python_cmd}\n")
        
        # Ê™¢Êü•PythonÂëΩ‰ª§
        if not self.check_python_command():
            print("‚ùå PythonÂëΩ‰ª§Ê™¢Êü•Â§±Êïó")
            return False
        
        # Ê™¢Êü•‰æùË≥¥
        if not self.check_dependencies():
            return False
        
        # Ê™¢Êü•ËÖ≥Êú¨Êñá‰ª∂
        if not self.create_script_files():
            print("\n‚ùå Ë´ãÂÖàÂª∫Á´ãÊâÄÊúâÂøÖË¶ÅÁöÑËÖ≥Êú¨Êñá‰ª∂")
            return False
        
        # Âü∑Ë°åÂêÑÊ≠•È©ü
        total_start_time = time.time()
        
        for step_name, script_name in self.steps:
            success = self.run_step(step_name, script_name)
            if not success:
                print(f"\n‚ùå ÊµÅÁ®ãÂú® '{step_name}' Ê≠•È©üÂ§±Êïó")
                return False
        
        total_time = time.time() - total_start_time
        
        # Ê™¢Êü•ÁµêÊûú
        self.check_results()
        
        # È°ØÁ§∫Â†±Âëä
        self.show_final_report()
        
        print(f"\n‚è±Ô∏è Á∏ΩÂü∑Ë°åÊôÇÈñì: {total_time/60:.1f} ÂàÜÈêò")
        print("üéØ ÊµÅÁ®ãÂü∑Ë°åÂÆåÊàêÔºÅ")
        
        return True

def main():
    """‰∏ªÂáΩÊï∏"""
    print("üåü DNN+ILP ÂÖâÁ∂≤Ë∑ØRWA ÊãìÊí≤ÊÑüÁü•Ëß£Ê±∫ÊñπÊ°à")
    print("="*50)
    
    # ÈÅ∏ÊìáPythonÂëΩ‰ª§
    print("ÈÅ∏ÊìáPythonÂëΩ‰ª§:")
    print("1. python3 (Êé®Ëñ¶)")
    print("2. python")
    print("3. Ëá™ÂãïÊ™¢Ê∏¨")
    
    while True:
        choice = input("Ë´ãÈÅ∏ÊìáPythonÂëΩ‰ª§ (1-3): ").strip()
        
        if choice == "1":
            python_cmd = "python3"
            break
        elif choice == "2":
            python_cmd = "python"
            break
        elif choice == "3":
            # Ëá™ÂãïÊ™¢Ê∏¨ÂèØÁî®ÁöÑPythonÂëΩ‰ª§
            for cmd in ["python3", "python"]:
                try:
                    result = subprocess.run([cmd, '--version'], 
                                          capture_output=True, text=True)
                    if result.returncode == 0:
                        python_cmd = cmd
                        print(f"‚úÖ Ëá™ÂãïÊ™¢Ê∏¨Âà∞: {cmd}")
                        break
                except:
                    continue
            else:
                print("‚ùå ÁÑ°Ê≥ïÊ™¢Ê∏¨Âà∞ÂèØÁî®ÁöÑPythonÂëΩ‰ª§")
                return
            break
        else:
            print("Ë´ãËº∏ÂÖ•ÊúâÊïàÈÅ∏È†Ö (1-3)")
    
    pipeline = RWAPipeline(python_cmd=python_cmd)
    
    print(f"\n‰ΩøÁî®ÂëΩ‰ª§: {python_cmd}")
    print("ÈÅ∏ÊìáÂü∑Ë°åÊ®°Âºè:")
    print("1. ÂÆåÊï¥ÊµÅÁ®ã (Êé®Ëñ¶)")
    print("2. Ê™¢Êü•Áí∞Â¢É")
    print("3. ÂÉÖÊ™¢Êü•ÁµêÊûú")
    print("4. ÈÄÄÂá∫")
    
    while True:
        choice = input("\nË´ãÈÅ∏Êìá (1-4): ").strip()
        
        if choice == "1":
            pipeline.run_complete_pipeline()
            break
        elif choice == "2":
            pipeline.check_python_command()
            pipeline.check_dependencies()
            pipeline.create_script_files()
            break
        elif choice == "3":
            pipeline.check_results()
            pipeline.show_final_report()
            break
        elif choice == "4":
            print("ÂÜçË¶ãÔºÅ")
            break
        else:
            print("Ë´ãËº∏ÂÖ•ÊúâÊïàÈÅ∏È†Ö (1-4)")

if __name__ == "__main__":
    main()